{"Classes":[{"constructors":[{"signature":"Animation(String name, Timeline[] timelines, Int32 duration)","jsName":"ctor"}],"methods":[{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.Animation","originalClassName":"Animation"},{"constructors":[{"signature":"AnimationState(AnimationStateData data)","jsName":"ctor"}],"methods":[{"signature":"ApplyEventTimelinesOnly(Skeleton skeleton, Boolean issueEvents)","jsName":"ApplyEventTimelinesOnly"},{"signature":"GetListener(Delegate callback, Boolean create)","jsName":"GetListener"},{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.AnimationState","originalClassName":"AnimationState"},{"constructors":[{"signature":"AnimationStateAdapter()","jsName":"ctor"}],"methods":[],"jsClassName":"Spine.AnimationStateAdapter","originalClassName":"AnimationStateAdapter"},{"constructors":[{"signature":"AtlasRegion()","jsName":"ctor"}],"methods":[{"signature":"Clone()","jsName":"Clone"}],"jsClassName":"Spine.AtlasRegion","originalClassName":"AtlasRegion"},{"constructors":[{"signature":"AtlasPage()","jsName":"ctor"}],"methods":[{"signature":"Clone()","jsName":"Clone"}],"jsClassName":"Spine.AtlasPage","originalClassName":"AtlasPage"},{"constructors":[{"signature":"Bone(BoneData data, Skeleton skeleton, Bone parent)","jsName":"ctor"}],"methods":[{"signature":"WorldToLocal(float worldX, float worldY, Single localX, Single localY)","jsName":"WorldToLocal"},{"signature":"LocalToWorld(float localX, float localY, Single worldX, Single worldY)","jsName":"LocalToWorld"},{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.Bone","originalClassName":"Bone"},{"constructors":[],"methods":[],"jsClassName":"Spine.ExposedList$1","originalClassName":"ExposedList<T>"},{"constructors":[{"signature":"ExposedList()","jsName":"ctor"},{"signature":"ExposedList(IEnumerable collection)","jsName":"$ctor2"},{"signature":"ExposedList(Int32 capacity)","jsName":"$ctor3"},{"signature":"ExposedList(T[] data, Int32 size)","jsName":"$ctor1"}],"methods":[{"signature":"Wrap(Ref reference)","jsName":"Wrap"},{"signature":"CheckMatch(Predicate match)","jsName":"CheckMatch"},{"signature":"Wrap(ExposedList list)","jsName":"Wrap"},{"signature":"Add(T item)","jsName":"Add"},{"signature":"GrowIfNeeded(Int32 addedCount)","jsName":"GrowIfNeeded"},{"signature":"Resize(Int32 newSize)","jsName":"Resize"},{"signature":"EnsureCapacity(Int32 min)","jsName":"EnsureCapacity"},{"signature":"CheckRange(Int32 index, Int32 count)","jsName":"CheckRange"},{"signature":"AddCollection(ICollection collection)","jsName":"AddCollection"},{"signature":"AddEnumerable(IEnumerable enumerable)","jsName":"AddEnumerable"},{"signature":"AddRange(ExposedList list)","jsName":"AddRange"},{"signature":"AddRange(IEnumerable collection)","jsName":"AddRange$1"},{"signature":"BinarySearch(T item)","jsName":"BinarySearch"},{"signature":"BinarySearch(T item, IComparer comparer)","jsName":"BinarySearch$1"},{"signature":"BinarySearch(Int32 index, Int32 count, T item, IComparer comparer)","jsName":"BinarySearch$2"},{"signature":"Clear(Boolean clearArray)","jsName":"Clear"},{"signature":"Contains(T item)","jsName":"Contains"},{"signature":"ConvertAll(Converter converter)","jsName":"ConvertAll"},{"signature":"CopyTo(T[] array)","jsName":"CopyTo"},{"signature":"CopyTo(T[] array, Int32 arrayIndex)","jsName":"CopyTo$1"},{"signature":"CopyTo(Int32 index, T[] array, Int32 arrayIndex, Int32 count)","jsName":"CopyTo$2"},{"signature":"Exists(Predicate match)","jsName":"Exists"},{"signature":"Find(Predicate match)","jsName":"Find"},{"signature":"FindAll(Predicate match)","jsName":"FindAll"},{"signature":"FindAllList(Predicate match)","jsName":"FindAllList"},{"signature":"FindIndex(Predicate match)","jsName":"FindIndex$2"},{"signature":"FindIndex(Int32 startIndex, Predicate match)","jsName":"FindIndex$1"},{"signature":"FindIndex(Int32 startIndex, Int32 count, Predicate match)","jsName":"FindIndex"},{"signature":"GetIndex(Int32 startIndex, Int32 count, Predicate match)","jsName":"GetIndex"},{"signature":"FindLast(Predicate match)","jsName":"FindLast"},{"signature":"FindLastIndex(Predicate match)","jsName":"FindLastIndex$2"},{"signature":"FindLastIndex(Int32 startIndex, Predicate match)","jsName":"FindLastIndex$1"},{"signature":"FindLastIndex(Int32 startIndex, Int32 count, Predicate match)","jsName":"FindLastIndex"},{"signature":"GetLastIndex(Int32 startIndex, Int32 count, Predicate match)","jsName":"GetLastIndex"},{"signature":"ForEach(Action action)","jsName":"ForEach"},{"signature":"GetEnumerator()","jsName":"GetEnumerator"},{"signature":"GetEnumerator()","jsName":"System$Collections$Generic$IEnumerable$1$GetEnumerator"},{"signature":"GetEnumerator()","jsName":"System$Collections$IEnumerable$GetEnumerator"},{"signature":"GetRange(Int32 index, Int32 count)","jsName":"GetRange"},{"signature":"IndexOf(T item)","jsName":"IndexOf"},{"signature":"IndexOf(T item, Int32 index)","jsName":"IndexOf$1"},{"signature":"IndexOf(T item, Int32 index, Int32 count)","jsName":"IndexOf$2"},{"signature":"Shift(Int32 start, Int32 delta)","jsName":"Shift"},{"signature":"CheckIndex(Int32 index)","jsName":"CheckIndex"},{"signature":"Insert(Int32 index, T item)","jsName":"Insert"},{"signature":"CheckCollection(IEnumerable collection)","jsName":"CheckCollection"},{"signature":"InsertRange(Int32 index, IEnumerable collection)","jsName":"InsertRange"},{"signature":"InsertCollection(Int32 index, ICollection collection)","jsName":"InsertCollection"},{"signature":"InsertEnumeration(Int32 index, IEnumerable enumerable)","jsName":"InsertEnumeration"},{"signature":"LastIndexOf(T item)","jsName":"LastIndexOf"},{"signature":"LastIndexOf(T item, Int32 index)","jsName":"LastIndexOf$1"},{"signature":"LastIndexOf(T item, Int32 index, Int32 count)","jsName":"LastIndexOf$2"},{"signature":"Remove(T item)","jsName":"Remove"},{"signature":"RemoveAll(Predicate match)","jsName":"RemoveAll"},{"signature":"RemoveAt(Int32 index)","jsName":"RemoveAt"},{"signature":"Pop()","jsName":"Pop"},{"signature":"RemoveRange(Int32 index, Int32 count)","jsName":"RemoveRange"},{"signature":"Reverse()","jsName":"Reverse"},{"signature":"Reverse(Int32 index, Int32 count)","jsName":"Reverse$1"},{"signature":"Sort()","jsName":"Sort"},{"signature":"Sort(IComparer comparer)","jsName":"Sort$1"},{"signature":"Sort(Comparison comparison)","jsName":"Sort$2"},{"signature":"Sort(Int32 index, Int32 count, IComparer comparer)","jsName":"Sort$3"},{"signature":"ToArray()","jsName":"ToArray"},{"signature":"TrimExcess()","jsName":"TrimExcess"},{"signature":"TrueForAll(Predicate match)","jsName":"TrueForAll"}],"jsClassName":"Spine.ExposedList$1","originalClassName":"ExposedList<T>"},{"constructors":[],"methods":[],"jsClassName":"Spine.ExposedList$1.Enumerator","originalClassName":"Enumerator<T>"},{"constructors":[{"signature":"Enumerator(ExposedList l)","jsName":"$ctor1"}],"methods":[{"signature":"Dispose()","jsName":"Dispose"},{"signature":"VerifyState()","jsName":"VerifyState"},{"signature":"MoveNext()","jsName":"moveNext"},{"signature":"Reset()","jsName":"System$Collections$IEnumerator$reset"}],"jsClassName":"Spine.ExposedList$1.Enumerator","originalClassName":"Enumerator<T>"},{"constructors":[],"methods":[{"signature":"Apply(float start, float end, float a)","jsName":"Apply"}],"jsClassName":"Spine.IInterpolation","originalClassName":"IInterpolation"},{"constructors":[],"methods":[{"signature":"Sin(float radians)","jsName":"Sin"},{"signature":"Cos(float radians)","jsName":"Cos"},{"signature":"SinDeg(float degrees)","jsName":"SinDeg"},{"signature":"CosDeg(float degrees)","jsName":"CosDeg"},{"signature":"Atan2(float y, float x)","jsName":"Atan2"},{"signature":"Clamp(float value, float min, float max)","jsName":"Clamp"}],"jsClassName":"Spine.MathUtils","originalClassName":"MathUtils"},{"constructors":[],"methods":[{"signature":"ComputeWorldPosition(Bone bone, Single ox, Single oy)","jsName":"ComputeWorldPosition"}],"jsClassName":"Spine.PointAttachment","originalClassName":"PointAttachment"},{"constructors":[],"methods":[],"jsClassName":"Spine.Ref$1","originalClassName":"Ref<T>"},{"constructors":[{"signature":"Ref(Object thisObj, Func getter, Action setter)","jsName":"ctor"}],"methods":[],"jsClassName":"Spine.Ref$1","originalClassName":"Ref<T>"},{"constructors":[{"signature":"Skeleton(SkeletonData data)","jsName":"$ctor1"},{"signature":"Skeleton(Skeleton skeleton)","jsName":"ctor"}],"methods":[{"signature":"GetBounds(Single x, Single y, Single width, Single height, Single[] vertexBuffer)","jsName":"GetBounds"}],"jsClassName":"Spine.Skeleton","originalClassName":"Skeleton"},{"constructors":[{"signature":"SkeletonBinary(AttachmentLoader attachmentLoader)","jsName":"ctor"}],"methods":[{"signature":"ReadSkeletonData(String path)","jsName":"ReadSkeletonData$1"},{"signature":"ReadSkeletonData(Stream stream)","jsName":"ReadSkeletonData"}],"jsClassName":"Spine.SkeletonBinary","originalClassName":"SkeletonBinary"},{"constructors":[{"signature":"SkeletonClipping()","jsName":"ctor"}],"methods":[{"signature":"ClipTriangles(Single[] vertices, Int32 verticesLength, Int32[] triangles, Int32 trianglesLength, Single[] uvs)","jsName":"ClipTriangles"}],"jsClassName":"Spine.SkeletonClipping","originalClassName":"SkeletonClipping"},{"constructors":[{"signature":"SkeletonData()","jsName":"ctor"},{"signature":"SkeletonData(SkeletonData data)","jsName":"$ctor1"}],"methods":[{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.SkeletonData","originalClassName":"SkeletonData"},{"constructors":[{"signature":"SkeletonJson(AttachmentLoader attachmentLoader)","jsName":"ctor"}],"methods":[{"signature":"ReadSkeletonData(TextReader reader)","jsName":"ReadSkeletonData"}],"jsClassName":"Spine.SkeletonJson","originalClassName":"SkeletonJson"},{"constructors":[{"signature":"Skin(String name)","jsName":"ctor"}],"methods":[{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.Skin","originalClassName":"Skin"},{"constructors":[{"signature":"Slot(SlotData data, Bone bone)","jsName":"$ctor1"},{"signature":"Slot(Slot slot, Bone bone)","jsName":"ctor"}],"methods":[{"signature":"ClampColor()","jsName":"ClampColor"},{"signature":"ClampSecondColor()","jsName":"ClampSecondColor"},{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.Slot","originalClassName":"Slot"},{"constructors":[{"signature":"SlotData(Int32 index, String name, BoneData boneData)","jsName":"ctor"}],"methods":[{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.SlotData","originalClassName":"SlotData"},{"constructors":[{"signature":"TrackEntry()","jsName":"ctor"}],"methods":[{"signature":"GetListener()","jsName":"GetListener"},{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.TrackEntry","originalClassName":"TrackEntry"},{"constructors":[{"signature":"TransformConstraintData(String name)","jsName":"ctor"}],"methods":[],"jsClassName":"Spine.TransformConstraintData","originalClassName":"TransformConstraintData"},{"constructors":[{"signature":"Atlas(List pages, List regions)","jsName":"ctor"},{"signature":"Atlas(TextReader reader, String imagesDir, TextureLoader textureLoader)","jsName":"$ctor1"}],"methods":[{"signature":"ReadEntry(String[] entry, String line)","jsName":"ReadEntry"},{"signature":"CombinePath(String path1, String path2)","jsName":"CombinePath"},{"signature":"GetEnumerator()","jsName":"GetEnumerator"},{"signature":"GetEnumerator()","jsName":"System$Collections$IEnumerable$GetEnumerator"},{"signature":"FlipV()","jsName":"FlipV"}],"jsClassName":"Spine.Atlas","originalClassName":"Atlas"},{"constructors":[{"signature":"AtlasAttachmentLoader(Atlas[] atlasArray)","jsName":"ctor"}],"methods":[{"signature":"NewBoundingBoxAttachment(Skin skin, String name)","jsName":"newBoundingBoxAttachment"},{"signature":"NewPathAttachment(Skin skin, String name)","jsName":"newPathAttachment"},{"signature":"NewPointAttachment(Skin skin, String name)","jsName":"newPointAttachment"},{"signature":"NewClippingAttachment(Skin skin, String name)","jsName":"newClippingAttachment"},{"signature":"FindRegion(String name)","jsName":"findRegion"},{"signature":"LoadSequence(String name, String basePath, Sequence sequence)","jsName":"loadSequence"},{"signature":"NewRegionAttachment(Skin skin, String name, String path)","jsName":"newRegionAttachment"},{"signature":"NewMeshAttachment(Skin skin, String name, String path)","jsName":"newMeshAttachment"}],"jsClassName":"Spine.AtlasAttachmentLoader","originalClassName":"AtlasAttachmentLoader"},{"constructors":[{"signature":"MeshAttachment(String name)","jsName":"ctor"}],"methods":[{"signature":"UpdateUVs()","jsName":"updateUVs"},{"signature":"Copy()","jsName":"copy"},{"signature":"NewLinkedMesh()","jsName":"newLinkedMesh"}],"jsClassName":"Spine.MeshAttachment","originalClassName":"MeshAttachment"},{"constructors":[{"signature":"Pow(float power)","jsName":"ctor"}],"methods":[{"signature":"Apply(float a)","jsName":"Apply$1"}],"jsClassName":"Spine.Pow","originalClassName":"Pow"},{"constructors":[{"signature":"RegionAttachment(String name)","jsName":"ctor"}],"methods":[{"signature":"UpdateOffset()","jsName":"updateOffset"},{"signature":"SetRegion(TextureRegion region)","jsName":"setRegion"},{"signature":"SetUVs(float u, float v, float u2, float v2, Int32 degrees)","jsName":"setUVs"},{"signature":"ComputeWorldVertices(Bone bone, Single[] worldVertices, Int32 offset, Int32 stride)","jsName":"computeWorldVertices"},{"signature":"Copy()","jsName":"copy"}],"jsClassName":"Spine.RegionAttachment","originalClassName":"RegionAttachment"},{"constructors":[{"signature":"TransformConstraint(TransformConstraintData data, Skeleton skeleton)","jsName":"$ctor1"},{"signature":"TransformConstraint(TransformConstraint constraint, Skeleton skeleton)","jsName":"ctor"}],"methods":[{"signature":"ToString()","jsName":"toString"}],"jsClassName":"Spine.TransformConstraint","originalClassName":"TransformConstraint"},{"constructors":[{"signature":"PowOut(float power)","jsName":"ctor"}],"methods":[{"signature":"Apply(float a)","jsName":"Apply$1"}],"jsClassName":"Spine.PowOut","originalClassName":"PowOut"}]}